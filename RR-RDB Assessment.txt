
1.First, use SELECT * from both tables and use your knowledge of queries and aggregate functions to get to know the data:

What are the Top 25 schools (.edu domains)?
How many .edu learners are located in New York?
The mobile_app column contains either mobile-user or NULL. How many of these Codecademy learners are using the mobile app?

->SELECT * FROM users;
  SELECT * FROM progress;

i.What are the Top 25 schools (.edu domains)?
->
SELECT email_domain, COUNT(*) AS user_count
FROM users
WHERE email_domain LIKE '%.edu'
GROUP BY email_domain
ORDER BY user_count DESC
LIMIT 25;


ii.How many .edu learners are located in New York?
->
SELECT COUNT(*) AS ny_edu_learners
FROM users
WHERE email_domain LIKE '%.edu'
  AND city = 'New York';


iii.The mobile_app column contains either mobile-user or NULL. How many of these Codecademy learners are using the mobile app?
->
SELECT COUNT(*) AS mobile_app_users
FROM users
WHERE mobile_app IS NOT NULL;


2.The data type of the sign_up_at column is DATETIME. It is for storing a date/time value in the database.

Notice that the values are formatted like:

2015-01-01 18:33:52

So the format is:

YYYY-MM-DD HH:MM:SS

SQLite comes with a strftime() function - a very powerful function that allows you to return a formatted date.

It takes two arguments:

strftime(format, column)

Letâ€™s test this function out:

SELECT sign_up_at,
   strftime('%S', sign_up_at)
FROM users
GROUP BY 1
LIMIT 20;

Now, using this function, query for the sign up counts for each hour.

->

SELECT
  strftime('%H', sign_up_at) AS hour,
  COUNT(*) AS sign_up_count
FROM users
GROUP BY hour
ORDER BY hour;

3.Join the two tables using JOIN and then see what you can dig out of the data!

->
SELECT *
FROM users
JOIN progress ON users.user_id = progress.user_id;

i.Do different schools (.edu domains) prefer different courses?

->
SELECT
  u.email_domain,
  SUM(CASE WHEN p.learn_cpp IS NOT NULL THEN 1 ELSE 0 END) AS cpp_learners,
  SUM(CASE WHEN p.learn_sql IS NOT NULL THEN 1 ELSE 0 END) AS sql_learners,
  SUM(CASE WHEN p.learn_html IS NOT NULL THEN 1 ELSE 0 END) AS html_learners,
  SUM(CASE WHEN p.learn_javascript IS NOT NULL THEN 1 ELSE 0 END) AS javascript_learners,
  SUM(CASE WHEN p.learn_java IS NOT NULL THEN 1 ELSE 0 END) AS java_learners
FROM users u
JOIN progress p ON u.user_id = p.user_id
WHERE u.email_domain LIKE '%.edu'
GROUP BY u.email_domain
ORDER BY u.email_domain;


ii.What courses are the New Yorkers students taking?
->
SELECT
  SUM(CASE WHEN p.learn_cpp IS NOT NULL THEN 1 ELSE 0 END) AS cpp_learners,
  SUM(CASE WHEN p.learn_sql IS NOT NULL THEN 1 ELSE 0 END) AS sql_learners,
  SUM(CASE WHEN p.learn_html IS NOT NULL THEN 1 ELSE 0 END) AS html_learners,
  SUM(CASE WHEN p.learn_javascript IS NOT NULL THEN 1 ELSE 0 END) AS javascript_learners,
  SUM(CASE WHEN p.learn_java IS NOT NULL THEN 1 ELSE 0 END) AS java_learners
FROM users u
JOIN progress p ON u.user_id = p.user_id
WHERE u.city = 'New York';

iii.What courses are the Chicago students taking?
->
SELECT
  SUM(CASE WHEN p.learn_cpp IS NOT NULL THEN 1 ELSE 0 END) AS cpp_learners,
  SUM(CASE WHEN p.learn_sql IS NOT NULL THEN 1 ELSE 0 END) AS sql_learners,
  SUM(CASE WHEN p.learn_html IS NOT NULL THEN 1 ELSE 0 END) AS html_learners,
  SUM(CASE WHEN p.learn_javascript IS NOT NULL THEN 1 ELSE 0 END) AS javascript_learners,
  SUM(CASE WHEN p.learn_java IS NOT NULL THEN 1 ELSE 0 END) AS java_learners
FROM users u
JOIN progress p ON u.user_id = p.user_id
WHERE u.city = 'Chicago';
